"use strict";(self.webpackChunknew_attributico_su=self.webpackChunknew_attributico_su||[]).push([[2185],{3993:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>l,contentTitle:()=>a,default:()=>c,frontMatter:()=>o,metadata:()=>n,toc:()=>d});const n=JSON.parse('{"id":"module-features/merge","title":"Merging Attributes","description":"It is common to encounter situations where different attribute names represent the same concept. For example, \\"Country of Origin\\", \\"Manufacturer\\", and \\"Country of Production\\" are essentially the same attribute. In such cases, it makes sense to merge them under a single name, such as \\"Country of Origin\\". These inconsistencies are called implicit duplicates. Automatic merging is not possible, so it must be done manually. However, the Drag-and-Drop technology significantly simplifies the process.","source":"@site/docs/module-features/merge.md","sourceDirName":"module-features","slug":"/module-features/merge","permalink":"/new.attributico.su/docs/next/module-features/merge","draft":false,"unlisted":false,"editUrl":"https://github.com/slhome2010/new.attributico.su/docs/module-features/merge.md","tags":[],"version":"current","sidebarPosition":8,"frontMatter":{"sidebar_position":8},"sidebar":"tutorialSidebar","previous":{"title":"Category Attributes","permalink":"/new.attributico.su/docs/next/module-features/category-attributes"},"next":{"title":"Filter","permalink":"/new.attributico.su/docs/next/module-features/filter"}}');var s=r(4848),i=r(8453);const o={sidebar_position:8},a="Merging Attributes",l={},d=[{value:"What Happens When Attributes Are Merged?",id:"what-happens-when-attributes-are-merged",level:2},{value:"Merging Groups",id:"merging-groups",level:2}];function u(e){const t={a:"a",admonition:"admonition",em:"em",h1:"h1",h2:"h2",header:"header",iframe:"iframe",mdxadmonitiontitle:"mdxadmonitiontitle",p:"p",strong:"strong",...(0,i.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.header,{children:(0,s.jsx)(t.h1,{id:"merging-attributes",children:"Merging Attributes"})}),"\n",(0,s.jsxs)(t.p,{children:["It is common to encounter situations where different attribute names represent the same concept. For example, ",(0,s.jsx)(t.strong,{children:'"Country of Origin"'}),", ",(0,s.jsx)(t.strong,{children:'"Manufacturer"'}),", and ",(0,s.jsx)(t.strong,{children:'"Country of Production"'})," are essentially the same attribute. In such cases, it makes sense to merge them under a single name, such as ",(0,s.jsx)(t.strong,{children:'"Country of Origin"'}),". These inconsistencies are called ",(0,s.jsx)(t.em,{children:"implicit duplicates"}),". Automatic merging is not possible, so it must be done manually. However, the Drag-and-Drop technology significantly simplifies the process."]}),"\n",(0,s.jsxs)(t.p,{children:["If you drag one ",(0,s.jsx)(t.strong,{children:"node"})," into another using Drag-and-Drop while holding ",(0,s.jsx)(t.strong,{children:"Ctrl"}),", the dragged ",(0,s.jsx)(t.strong,{children:"node"})," will be merged with the target node. If you drag ",(0,s.jsx)(t.strong,{children:"nodes"})," without ",(0,s.jsx)(t.strong,{children:"Ctrl"}),", it only sorts or changes the ",(0,s.jsx)(t.strong,{children:"group"}),". Thus, the combination ",(0,s.jsx)(t.strong,{children:"Ctrl + Drag-and-Drop"})," is used for merging ",(0,s.jsx)(t.strong,{children:"attributes"}),"."]}),"\n",(0,s.jsx)(t.h2,{id:"what-happens-when-attributes-are-merged",children:"What Happens When Attributes Are Merged?"}),"\n",(0,s.jsxs)(t.p,{children:["Links to products or categories are not lost, so the ",(0,s.jsx)(t.strong,{children:"values"})," of the attributes remain intact. If the same product is linked to both the target and the merged ",(0,s.jsx)(t.strong,{children:"attribute"}),", its ",(0,s.jsx)(t.strong,{children:"values"})," are added to the target. For example, if the target attribute had ",(0,s.jsx)(t.strong,{children:'"Russia/France"'}),", after merging, it will become ",(0,s.jsx)(t.strong,{children:'"Russia/France/Germany"'}),". New values are added using a delimiter. If the products were not linked to the target attribute, their link simply changes from the merged attribute to the target. A video example illustrates this process."]}),"\n",(0,s.jsx)(t.iframe,{width:"100%",height:"515",src:"https://www.youtube.com/embed/Z1w8sFOJy_E",title:"YouTube video player",frameBorder:"0",allow:"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture",allowFullScreen:!0}),"\n",(0,s.jsxs)(t.p,{children:["Multiple ",(0,s.jsx)(t.strong,{children:"attributes"})," can be merged with a target attribute simultaneously using ",(0,s.jsx)(t.a,{href:"/new.attributico.su/docs/next/module-features/tree-features",children:"multi-selection"}),". Merging ",(0,s.jsx)(t.strong,{children:"attributes"})," from different ",(0,s.jsx)(t.strong,{children:"groups"})," is also allowed."]}),"\n",(0,s.jsx)(t.h2,{id:"merging-groups",children:"Merging Groups"}),"\n",(0,s.jsxs)(t.p,{children:["It is also possible to merge ",(0,s.jsx)(t.strong,{children:"groups"}),". In this case, all ",(0,s.jsx)(t.strong,{children:"attributes"})," from the selected ",(0,s.jsx)(t.strong,{children:"group"})," will be moved to the target group, and the original ",(0,s.jsx)(t.strong,{children:"group"})," will be deleted."]}),"\n",(0,s.jsxs)(t.admonition,{type:"danger",children:[(0,s.jsx)(t.mdxadmonitiontitle,{}),(0,s.jsxs)(t.p,{children:["After merging, ",(0,s.jsx)(t.strong,{children:"nodes"})," marked for merging will be ",(0,s.jsx)(t.strong,{children:"deleted permanently with no recovery option"}),". If the merge does not go as expected, the only way to fix it is by restoring a backup of the database."]})]})]})}function c(e={}){const{wrapper:t}={...(0,i.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(u,{...e})}):u(e)}},8453:(e,t,r)=>{r.d(t,{R:()=>o,x:()=>a});var n=r(6540);const s={},i=n.createContext(s);function o(e){const t=n.useContext(i);return n.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function a(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:o(e.components),n.createElement(i.Provider,{value:t},e.children)}}}]);